{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bbk03\\\\Desktop\\\\Boottent\\\\my-app\\\\src\\\\App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport MyNav from './Nav.js';\n// export한 파일을 import로 받아와 명명 후 from 파일 경로 가능 \nimport MyFooter from './Footer.js';\nimport MyTodo from './Todo.js';\nimport Child from './Child.js';\nimport React from \"react\";\n\n//constructor 컴포넌트 인스턴스 생성 시 1회 - 초기 state 설정 및 메서드 바인딩 가능\n//render 리렌더링 때마다 실행 \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LifecycleDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    //컴포넌트가 생성될 때 호출된다 constructor ()\n    this.handelIncrement = () => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n    this.state = {\n      count: 0,\n      hasError: false\n    };\n  }\n\n  // count 는 0으로 기본 세팅 값일테고 hasError은 몰라\n\n  //componrntDidMount()는 컴포넌트가 처음으로 DOM 마운트(연결)된 직후에 호출됨 \n  componentDidMount() {\n    console.log(\"componentDidMount (처음 렌더링 완료)\");\n    // 예: 네트워크 요청이나 타이머 설정 등의 작업??? 컴포넌트가 처음 나타난 직후 1번만 호출된다.\n  }\n  // shouldComponentUpdata(): 컴포넌트가 리렌더링 되어야 할지 결정한다\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"shouldComponentUpdate\");\n    // 예: 상태가 변경될 때만 리렌더링\n    return nextState.count !== this.state.count;\n  }\n  // componentDidUpdate() : 컴포넌트가 리렌더링된 직후에 호출된다 \n  componentDidUpdate(preProps, prevState, snapshot) {\n    console.log(\"componentDidUpdate\");\n    //예: 상태변경 후 추가 작업??\n  }\n  //componentWillUnmount() : 컴포넌트가 DOM에서 제거되기 직전에 호출됩니다. \n  componentWillUnmount() {\n    console.log(\"componentWillUnmount\");\n    //예: 타이머 해제나 네트워크 요청 취소등의 작업\n  }\n  render() {\n    //render() : 컴포넌트 UI정의\n    console.log(\"render\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"React LifeCycle Methods Demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Count: \", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handelIncrement,\n        children: \"\\uC99D\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(\"컴포넌트 제거 이벤트\"),\n        children: \"componentWillUnmount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default LifecycleDemo;","map":{"version":3,"names":["logo","MyNav","MyFooter","MyTodo","Child","React","jsxDEV","_jsxDEV","LifecycleDemo","Component","constructor","props","handelIncrement","setState","count","state","hasError","componentDidMount","console","log","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","preProps","prevState","snapshot","componentWillUnmount","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["C:/Users/bbk03/Desktop/Boottent/my-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport MyNav from './Nav.js';\n// export한 파일을 import로 받아와 명명 후 from 파일 경로 가능 \nimport MyFooter from './Footer.js';\nimport MyTodo from './Todo.js';\nimport Child from './Child.js';\nimport React from \"react\";\n\n\n\n\n//constructor 컴포넌트 인스턴스 생성 시 1회 - 초기 state 설정 및 메서드 바인딩 가능\n//render 리렌더링 때마다 실행 \n\n\n\n\n\n\nclass LifecycleDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    //컴포넌트가 생성될 때 호출된다 constructor ()\n    this.state = {\n      count: 0,\n      hasError: false,\n    };\n  }\n\n\n  // count 는 0으로 기본 세팅 값일테고 hasError은 몰라\n\n  //componrntDidMount()는 컴포넌트가 처음으로 DOM 마운트(연결)된 직후에 호출됨 \n  componentDidMount() {\n    console.log(\"componentDidMount (처음 렌더링 완료)\");\n    // 예: 네트워크 요청이나 타이머 설정 등의 작업??? 컴포넌트가 처음 나타난 직후 1번만 호출된다.\n  };\n\n  // shouldComponentUpdata(): 컴포넌트가 리렌더링 되어야 할지 결정한다\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"shouldComponentUpdate\");\n    // 예: 상태가 변경될 때만 리렌더링\n    return nextState.count !== this.state.count;\n  };\n\n\n  // componentDidUpdate() : 컴포넌트가 리렌더링된 직후에 호출된다 \n  componentDidUpdate(preProps, prevState, snapshot) {\n    console.log(\"componentDidUpdate\");\n    //예: 상태변경 후 추가 작업??\n  };\n\n  //componentWillUnmount() : 컴포넌트가 DOM에서 제거되기 직전에 호출됩니다. \n  componentWillUnmount() {\n    console.log(\"componentWillUnmount\");\n    //예: 타이머 해제나 네트워크 요청 취소등의 작업\n  };\n\n  handelIncrement = () => {\n    this.setState({ count: this.state.count + 1 });\n  }\n\n  render() {\n    //render() : 컴포넌트 UI정의\n    console.log(\"render\");\n\n    return (\n      <div>\n        <h1>React LifeCycle Methods Demo</h1>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.handelIncrement}>증가</button>\n        <button onClick={() => console.log(\"컴포넌트 제거 이벤트\")} >componentWillUnmount</button>\n      </div>\n    )\n\n  }\n}\n\nexport default LifecycleDemo;\n\n\n\n\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,UAAU;AAC5B;AACA,OAAOC,QAAQ,MAAM,aAAa;AAClC,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,KAAK,MAAM,OAAO;;AAKzB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,aAAa,SAASH,KAAK,CAACI,SAAS,CAAC;EAC1CC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ;IAAA,KAoCFC,eAAe,GAAG,MAAM;MACtB,IAAI,CAACC,QAAQ,CAAC;QAAEC,KAAK,EAAE,IAAI,CAACC,KAAK,CAACD,KAAK,GAAG;MAAE,CAAC,CAAC;IAChD,CAAC;IArCC,IAAI,CAACC,KAAK,GAAG;MACXD,KAAK,EAAE,CAAC;MACRE,QAAQ,EAAE;IACZ,CAAC;EACH;;EAGA;;EAEA;EACAC,iBAAiBA,CAAA,EAAG;IAClBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C;EACF;EAEA;EACAC,qBAAqBA,CAACC,SAAS,EAAEC,SAAS,EAAE;IAC1CJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC;IACA,OAAOG,SAAS,CAACR,KAAK,KAAK,IAAI,CAACC,KAAK,CAACD,KAAK;EAC7C;EAGA;EACAS,kBAAkBA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAE;IAChDR,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC;EACF;EAEA;EACAQ,oBAAoBA,CAAA,EAAG;IACrBT,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC;EACF;EAMAS,MAAMA,CAAA,EAAG;IACP;IACAV,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IAErB,oBACEZ,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,EAAI;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrC1B,OAAA;QAAAsB,QAAA,GAAG,SAAO,EAAC,IAAI,CAACd,KAAK,CAACD,KAAK;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChC1B,OAAA;QAAQ2B,OAAO,EAAE,IAAI,CAACtB,eAAgB;QAAAiB,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClD1B,OAAA;QAAQ2B,OAAO,EAAEA,CAAA,KAAMhB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAE;QAAAU,QAAA,EAAE;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9E,CAAC;EAGV;AACF;AAEA,eAAezB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}