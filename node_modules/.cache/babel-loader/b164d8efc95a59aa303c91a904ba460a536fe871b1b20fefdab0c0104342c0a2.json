{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bbk03\\\\Desktop\\\\Boottent\\\\my-app\\\\src\\\\Todo.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Todo() {\n  _s();\n  // 초기 할 일 목록 상태 : 배열로 저장 (id, text)\n  const [todos, setTodos] = useState([{\n    id: 1,\n    text: '청소하기'\n  }, {\n    id: 2,\n    text: '공부하기'\n  }, {\n    id: 3,\n    text: '청소1하기'\n  }, {\n    id: 4,\n    text: '공부1하기'\n  }, {\n    id: 5,\n    text: '청소2하기'\n  }, {\n    id: 6,\n    text: '공부2하기'\n  }]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD560 \\uC77C \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: todo.text\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }, this) // map을 써서 배열 요소마다 li 반복문 만들 수 있다.\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n// jQuery에서 input에 쓴 값을 읽고 append로 <li> 추가했던 것처럼,\n// React에서는 input값도 useState로 관리하고, 버튼 클릭 시 todos 배열을 업데이트하는 함수로 처리한다. \n_s(Todo, \"YeFmB3liQhAeNMF5zX6xuEoZohQ=\");\n_c = Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Todo","_s","todos","setTodos","id","text","children","fileName","_jsxFileName","lineNumber","columnNumber","map","todo","_c","$RefreshReg$"],"sources":["C:/Users/bbk03/Desktop/Boottent/my-app/src/Todo.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\n\r\nexport default function Todo() {\r\n    // 초기 할 일 목록 상태 : 배열로 저장 (id, text)\r\n    const [todos, setTodos] = useState([\r\n        { id: 1, text: '청소하기' },\r\n        { id: 2, text: '공부하기' },\r\n        { id: 3, text: '청소1하기' },\r\n        { id: 4, text: '공부1하기' },\r\n        { id: 5, text: '청소2하기' },\r\n        { id: 6, text: '공부2하기' },\r\n    ]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>할 일 목록</h2>\r\n            <ul>\r\n                {todos.map(todo => (\r\n                    <li key={todo.id}>{todo.text}</li>  // map을 써서 배열 요소마다 li 반복문 만들 수 있다.\r\n                ))}\r\n                {/* 리스트에서 항상 key prop에 고유한 값을 주어야 효율적인 업데이트 가능.. */}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// jQuery에서 input에 쓴 값을 읽고 append로 <li> 추가했던 것처럼,\r\n// React에서는 input값도 useState로 관리하고, 버튼 클릭 시 todos 배열을 업데이트하는 함수로 처리한다. \r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIxC,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC3B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAC/B;IAAEO,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC,EACvB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC,EACvB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAQ,CAAC,EACxB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAQ,CAAC,EACxB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAQ,CAAC,EACxB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAQ,CAAC,CAC3B,CAAC;EAGF,oBACIN,OAAA;IAAAO,QAAA,gBACIP,OAAA;MAAAO,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfX,OAAA;MAAAO,QAAA,EACKJ,KAAK,CAACS,GAAG,CAACC,IAAI,iBACXb,OAAA;QAAAO,QAAA,EAAmBM,IAAI,CAACP;MAAI,GAAnBO,IAAI,CAACR,EAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAAC,CAAE;MACvC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;;AAGA;AACA;AAAAT,EAAA,CA3BwBD,IAAI;AAAAa,EAAA,GAAJb,IAAI;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}