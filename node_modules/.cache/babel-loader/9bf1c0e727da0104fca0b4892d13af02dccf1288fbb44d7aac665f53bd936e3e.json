{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bbk03\\\\Desktop\\\\Boottent\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import Child from \"./Child\";\n// import { useState } from \"react\";\n\n// export default function App() {\n//   const [data, setData] = useState(\"초기값\");\n\n//   const 콜백함수 = (자식에서받음) => { };\n//   console.log(\"콜백함수 실행\", 자식에서받음)\n//   return (\n//     <>\n//     <h1>부모상태: {data}</h1>;\n//   <Child onData={콜백함수} />\n//   <Button />\n//   </>\n//   )\n\n//   }\n\n// App.jsx\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\n// const Container = styled.div`\n// background: red;\n// `;\n// const Input = styled.input`\n// background: red;\n// `;\n\n// const Title = styled.h1`\n// font-size: 40px;\n// `;\n\n// const Button = styled.button`\n// background: ${(props)=> (props.add ? \"blue\" : \"gray\")};\n// border: none;\n// width: 50px;\n// paddtin: 5px 10px;\n\n// `;\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   const addTodo = () => {\n//     if (input.trim() === \"\") return;\n//     setTodos([...todos, input.trim()]);\n//     setInput(\"\");\n//   };\n\n//   const deleteTodo = (index) => {\n//     const newTodos = todos.filter((_, i) => i !== index);\n//     setTodos(newTodos);\n//   };\n\n//   const AddButton = styled(Button)``;\n//   // Button 상속받아 AddButton 작업하기\n\n//   return (\n//     <Container>\n//       <Title>할 일 목록</Title>\n\n//       <div>\n//         <Input\n//           type=\"text\"\n//           placeholder=\"할 일을 입력하세요\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//         />\n//         <Button onClick={addTodo}>추가</Button>\n//       </div>\n\n//       <ul>\n//         {todos.map((todo, index) => (\n//           <li key={index}>\n//             {todo}\n//             <Button onClick={() => deleteTodo(index)}>삭제</Button>\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h1 className=\"bg-orange-400 text-white p-4 text-center text-2xl\">안녕</h1>\n//     </Container>\n//   );\n// }\n\n// export default App;\n\n// ========================================== 8월 1일 과제 ==================================================\n\n//중앙 배치 전용 변수 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst centerFlex = \"flex justify-center items-center flex-col bg-Yellow\";\nconst Title = styled.h2`\n  font-size: 50px;\n  background: orange;\n  text-align: center;\n  color: blue;\n  font-weight: 900;\n`;\n_c = Title;\nexport default function Todo() {\n  _s();\n  const [todos, setTodos] = useState([{\n    id: 1,\n    text: '청소하기'\n  }, {\n    id: 2,\n    text: '공부하기'\n  }]);\n  const [inputValue, setInputValue] = useState('');\n  // React 상태를 선언하는 구문...inputValue는 상태 변수라고 하는데 다음에 알아보자..\n\n  // 새 항목을 추가하는 함수 \n  const addTodo = () => {\n    const trimmed = inputValue.trim();\n    // trimmed라는 변수가 input값 trim처리해서 저장됨 그걸 아래 조건문if문으로 alert 기능 추가 및 리턴 추가\n    if (trimmed === '') {\n      alert('값을 추가해주세요.');\n      return;\n    }\n\n    // todos는 현재까지 저장된 할 일 목록 배열 상태\n    //\n    setTodos([...todos, {\n      id: Date.now(),\n      text: trimmed\n    }]);\n    // 위 형식인 ...todos 현재 배열의 모든 항목을 펼쳐 복사 / 그 뒤는 새 할 일 항목 객체/\n    // id는 현재 시간을 기반으로 숫자를 주어 항목별 고유값 생성한다고 한다 \n    setInputValue('');\n  };\n\n  // 여기가 컴포넌트가 렌더링할 UI를 그려줄 JSX로 반환하는 부분이라고 한다 \n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: centerFlex,\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"\\uD560 \\uC77C \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: todo.text\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"\\uD560 \\uC77C\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n      //vlaue의 input값이 React의 inputValue에 연결되어 있다. \n      ,\n      value: inputValue\n      //그러니까 e.target이 이벤트가 발생한 html요소 =====>>>> 즉, input을 뜻함\n      ,\n      onChange: e => setInputValue(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTodo,\n      children: \"\\uD560\\uC77C\\uBAA9\\uB85D\\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n}\n//사용자의 입력 → onChange 이벤트 발생 → 상태 변경 → React가 UI 다시 렌더링 이라는 구조\n_s(Todo, \"GmKTbtlTCUBLQo6Z6exRupLMtHI=\");\n_c2 = Todo;\nvar _c, _c2;\n$RefreshReg$(_c, \"Title\");\n$RefreshReg$(_c2, \"Todo\");","map":{"version":3,"names":["React","useState","styled","jsxDEV","_jsxDEV","centerFlex","Title","h2","_c","Todo","_s","todos","setTodos","id","text","inputValue","setInputValue","addTodo","trimmed","trim","alert","Date","now","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","todo","type","placeholder","value","onChange","e","target","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/bbk03/Desktop/Boottent/my-app/src/App.js"],"sourcesContent":["// import Child from \"./Child\";\n// import { useState } from \"react\";\n\n\n\n// export default function App() {\n//   const [data, setData] = useState(\"초기값\");\n\n//   const 콜백함수 = (자식에서받음) => { };\n//   console.log(\"콜백함수 실행\", 자식에서받음)\n//   return (\n//     <>\n//     <h1>부모상태: {data}</h1>;\n//   <Child onData={콜백함수} />\n//   <Button />\n//   </>\n//   )\n\n//   }\n\n// App.jsx\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\n\n// const Container = styled.div`\n// background: red;\n// `;\n// const Input = styled.input`\n// background: red;\n// `;\n\n// const Title = styled.h1`\n// font-size: 40px;\n// `;\n\n// const Button = styled.button`\n// background: ${(props)=> (props.add ? \"blue\" : \"gray\")};\n// border: none;\n// width: 50px;\n// paddtin: 5px 10px;\n\n// `;\n\n// function App() {\n//   const [todos, setTodos] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   const addTodo = () => {\n//     if (input.trim() === \"\") return;\n//     setTodos([...todos, input.trim()]);\n//     setInput(\"\");\n//   };\n\n//   const deleteTodo = (index) => {\n//     const newTodos = todos.filter((_, i) => i !== index);\n//     setTodos(newTodos);\n//   };\n\n//   const AddButton = styled(Button)``;\n//   // Button 상속받아 AddButton 작업하기\n\n\n//   return (\n//     <Container>\n//       <Title>할 일 목록</Title>\n\n//       <div>\n//         <Input\n//           type=\"text\"\n//           placeholder=\"할 일을 입력하세요\"\n//           value={input}\n//           onChange={(e) => setInput(e.target.value)}\n//         />\n//         <Button onClick={addTodo}>추가</Button>\n//       </div>\n\n//       <ul>\n//         {todos.map((todo, index) => (\n//           <li key={index}>\n//             {todo}\n//             <Button onClick={() => deleteTodo(index)}>삭제</Button>\n//           </li>\n//         ))}\n//       </ul>\n\n\n//       <h1 className=\"bg-orange-400 text-white p-4 text-center text-2xl\">안녕</h1>\n//     </Container>\n//   );\n// }\n\n// export default App;\n\n\n// ========================================== 8월 1일 과제 ==================================================\n\n//중앙 배치 전용 변수 생성\nconst centerFlex = \"flex justify-center items-center flex-col bg-Yellow\";\n\nconst Title = styled.h2`\n  font-size: 50px;\n  background: orange;\n  text-align: center;\n  color: blue;\n  font-weight: 900;\n`;\n\n\n\nexport default function Todo() {\n    const [todos, setTodos] = useState([\n        { id: 1, text: '청소하기' },\n        { id: 2, text: '공부하기' },\n    ]);\n\n    const [inputValue, setInputValue] = useState('');\n    // React 상태를 선언하는 구문...inputValue는 상태 변수라고 하는데 다음에 알아보자..\n\n\n\n\n    // 새 항목을 추가하는 함수 \n    const addTodo = () => {\n        const trimmed = inputValue.trim();\n        // trimmed라는 변수가 input값 trim처리해서 저장됨 그걸 아래 조건문if문으로 alert 기능 추가 및 리턴 추가\n        if (trimmed === '') {\n            alert('값을 추가해주세요.');\n            return;\n        }\n\n        // todos는 현재까지 저장된 할 일 목록 배열 상태\n        //\n        setTodos([...todos, { id: Date.now(), text: trimmed }]);\n        // 위 형식인 ...todos 현재 배열의 모든 항목을 펼쳐 복사 / 그 뒤는 새 할 일 항목 객체/\n        // id는 현재 시간을 기반으로 숫자를 주어 항목별 고유값 생성한다고 한다 \n        setInputValue('');\n    };\n\n\n    // 여기가 컴포넌트가 렌더링할 UI를 그려줄 JSX로 반환하는 부분이라고 한다 \n    return (\n        <div className={centerFlex}>\n            <Title>할 일 목록</Title>\n            <ul>\n                {/* todos 배열을 map으로 돌면서 객체 받아옴 -> li 요소 만듬 \n                li에서 key={todo.id}는 꼭 넣어줘야 React가 효율적인 렌더링 할 수 있다함  */}\n                {todos.map(todo => (\n                    <li key={todo.id}>{todo.text}</li>\n                ))}\n                {/* li로 todo.id값 받아와서 > todo에 적힌 text를 넣어서 표현 */}\n            </ul>\n\n            {/* 입력창 구현하는 파트 */}\n            <input\n                type=\"text\"\n                placeholder=\"할 일을 입력하세요\"\n                //vlaue의 input값이 React의 inputValue에 연결되어 있다. \n                value={inputValue}\n                //그러니까 e.target이 이벤트가 발생한 html요소 =====>>>> 즉, input을 뜻함\n                onChange={e => setInputValue(e.target.value)}\n            />\n            <button onClick={addTodo}>할일목록추가</button>\n        </div>\n    );\n}\n//사용자의 입력 → onChange 이벤트 발생 → 상태 변경 → React가 UI 다시 렌더링 이라는 구조\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}