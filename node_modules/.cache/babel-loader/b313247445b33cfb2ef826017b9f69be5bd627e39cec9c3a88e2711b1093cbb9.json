{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bbk03\\\\Desktop\\\\Boottent\\\\my-app\\\\src\\\\Todo.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// export default function Todo() {\n//     const [todos, setTodos] = useState([\n//         // useState가 기본 목록을 배열형태로 관리한다\n//         { id: 1, text: '청소하기' },\n//         { id: 2, text: '공부하기' },\n//     ]);\n\n//     return (\n//         <div>\n//             <h2>할 일 목록</h2>\n//             <ul>\n//                 {todos.map(todo => (  \n//                     // map으로 리스트 li 생성할 때는 key 꼭 넣기 \n//                     <li key={todo.id}>{todo.text}</li>\n//                 ))}\n//             </ul>\n//         </div>\n//     );\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Todo() {\n  _s();\n  const [todos, setTodos] = useState([{\n    id: 1,\n    text: '청소하기'\n  }, {\n    id: 2,\n    text: '공부하기'\n  }]);\n  const [inputValue, setInputValue] = useState('');\n  // React 상태를 선언하는 구문...inputValue는 상태 변수라고 하는데 다음에 알아보자..\n\n  // 새 항목을 추가하는 함수 \n  const addTodo = () => {\n    const trimmed = inputValue.trim();\n    // trimmed라는 변수가 input값 trim처리해서 저장됨 그걸 아래 조건문if문으로 alert 기능 추가 및 리턴 추가\n    if (trimmed === '') {\n      alert('값을 추가해주세요.');\n      return;\n    }\n\n    // todos는 현재까지 저장된 할 일 목록 배열 상태\n    //\n    setTodos([...todos, {\n      id: Date.now(),\n      text: trimmed\n    }]);\n    // 위 형식인 ...todos 현재 배열의 모든 항목을 펼쳐 복사 / 그 뒤는 새 할 일 항목 객체/\n    // id는 현재 시간을 기반으로 숫자를 주어 항목별 고유값 생성한다고 한다 \n    setInputValue('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD560 \\uC77C \\uBAA9\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: todo.text\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"\\uD560 \\uC77C\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      value: inputValue,\n      onChange: e => setInputValue(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTodo,\n      children: \"\\uD560\\uC77C\\uBAA9\\uB85D\\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(Todo, \"yyffgsCE+Vw2q4l3GfHc5gz9nzM=\");\n_c = Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Todo","_s","todos","setTodos","id","text","inputValue","setInputValue","addTodo","trimmed","trim","alert","Date","now","children","fileName","_jsxFileName","lineNumber","columnNumber","map","todo","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/bbk03/Desktop/Boottent/my-app/src/Todo.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\n\r\n\r\n// export default function Todo() {\r\n//     const [todos, setTodos] = useState([\r\n//         // useState가 기본 목록을 배열형태로 관리한다\r\n//         { id: 1, text: '청소하기' },\r\n//         { id: 2, text: '공부하기' },\r\n//     ]);\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>할 일 목록</h2>\r\n//             <ul>\r\n//                 {todos.map(todo => (  \r\n//                     // map으로 리스트 li 생성할 때는 key 꼭 넣기 \r\n//                     <li key={todo.id}>{todo.text}</li>\r\n//                 ))}\r\n//             </ul>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n\r\nexport default function Todo() {\r\n    const [todos, setTodos] = useState([\r\n        { id: 1, text: '청소하기' },\r\n        { id: 2, text: '공부하기' },\r\n    ]);\r\n\r\n    const [inputValue, setInputValue] = useState(''); \r\n    // React 상태를 선언하는 구문...inputValue는 상태 변수라고 하는데 다음에 알아보자..\r\n\r\n\r\n\r\n    \r\n// 새 항목을 추가하는 함수 \r\n    const addTodo = () => {\r\n        const trimmed = inputValue.trim();\r\n        // trimmed라는 변수가 input값 trim처리해서 저장됨 그걸 아래 조건문if문으로 alert 기능 추가 및 리턴 추가\r\n        if (trimmed === '') {\r\n            alert('값을 추가해주세요.');\r\n            return;\r\n        }\r\n\r\n        // todos는 현재까지 저장된 할 일 목록 배열 상태\r\n        //\r\n        setTodos([...todos, { id: Date.now(), text: trimmed }]);\r\n        // 위 형식인 ...todos 현재 배열의 모든 항목을 펼쳐 복사 / 그 뒤는 새 할 일 항목 객체/\r\n        // id는 현재 시간을 기반으로 숫자를 주어 항목별 고유값 생성한다고 한다 \r\n        setInputValue('');\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>할 일 목록</h2>\r\n            <ul>\r\n                {todos.map(todo => (\r\n                    <li key={todo.id}>{todo.text}</li>\r\n                ))}\r\n            </ul>\r\n\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"할 일을 입력하세요\"\r\n                value={inputValue}\r\n                onChange={e => setInputValue(e.target.value)}\r\n            />\r\n            <button onClick={addTodo}>할일목록추가</button>\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAKvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIA,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAC/B;IAAEO,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC,EACvB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC,CAC1B,CAAC;EAEF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD;;EAKJ;EACI,MAAMW,OAAO,GAAGA,CAAA,KAAM;IAClB,MAAMC,OAAO,GAAGH,UAAU,CAACI,IAAI,CAAC,CAAC;IACjC;IACA,IAAID,OAAO,KAAK,EAAE,EAAE;MAChBE,KAAK,CAAC,YAAY,CAAC;MACnB;IACJ;;IAEA;IACA;IACAR,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE;MAAEE,EAAE,EAAEQ,IAAI,CAACC,GAAG,CAAC,CAAC;MAAER,IAAI,EAAEI;IAAQ,CAAC,CAAC,CAAC;IACvD;IACA;IACAF,aAAa,CAAC,EAAE,CAAC;EACrB,CAAC;EAID,oBACIR,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfnB,OAAA;MAAAe,QAAA,EACKZ,KAAK,CAACiB,GAAG,CAACC,IAAI,iBACXrB,OAAA;QAAAe,QAAA,EAAmBM,IAAI,CAACf;MAAI,GAAnBe,IAAI,CAAChB,EAAE;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CACpC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAELnB,OAAA;MACIsB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,oDAAY;MACxBC,KAAK,EAAEjB,UAAW;MAClBkB,QAAQ,EAAEC,CAAC,IAAIlB,aAAa,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACFnB,OAAA;MAAQ4B,OAAO,EAAEnB,OAAQ;MAAAM,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEd;AAACjB,EAAA,CAjDuBD,IAAI;AAAA4B,EAAA,GAAJ5B,IAAI;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}