{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bbk03\\\\Desktop\\\\Boottent\\\\my-app\\\\src\\\\Todo.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// export default function Todo() {\n//     // 초기 할 일 목록 상태 : 배열로 저장 (id, text)\n//     const [todos, setTodos] = useState([\n//         { id: 1, text: '청소하기' },\n//         { id: 2, text: '공부하기' },\n//         { id: 3, text: '청소1하기' },\n//         { id: 4, text: '공부1하기' },\n//         { id: 5, text: '청소2하기' },\n//         { id: 6, text: '공부2하기' },\n//     ]);\n\n//     return (\n//         <div>\n//             <h2>할 일 목록</h2>\n//             <ul>\n//                 {todos.map(todo => (\n//                     <li key={todo.id}>{todo.text}</li>  // map을 써서 배열 요소마다 li 반복문 만들 수 있다.\n//                 ))}\n//                 {/* 리스트에서 항상 key prop에 고유한 값을 주어야 효율적인 업데이트 가능.. */}\n//             </ul>\n//         </div>\n//     );\n// }\n\n// jQuery에서 input에 쓴 값을 읽고 append로 <li> 추가했던 것처럼,\n// React에서는 input값도 useState로 관리하고, 버튼 클릭 시 todos 배열을 업데이트하는 함수로 처리한다. \n\n// export default function Todo() {\n//     const [todos, setTodos] = useState([\n//         { id: 1, text: '청소하기' },\n\n//     ]);\n\n//     // input 값 상태\n//     const [inputValue, setInputValue] = useState('');\n\n//     // 추가 함수\n//     const addTodo = () => {\n//         const trimmed = inputValue.trim();\n//         if (trimmed === '') {\n//             alert('값을 추가해주세요.');\n//             return;\n//         }\n\n//         // 이전 배열에 새 할 일 추가\n//         setTodos([...todos, { id: Date.now(), text: trimmed }]);\n//         setInputValue(''); // 입력창 초기화\n//     };\n\n//     return (\n//         <div>\n//             <h2>할 일 목록</h2>\n//             <ul>\n//                 {todos.map(todo => (\n//                     <li key={todo.id}>{todo.text}</li>\n//                 ))}\n//             </ul>\n\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"할 일을 입력하세요\"\n//                 value={inputValue}\n//                 onChange={e => setInputValue(e.target.value)} // 입력 변화 감지\n//             />\n//             <button onClick={addTodo}>할일목록추가</button>\n//         </div>\n//     );\n// } \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Counter() {\n  _s();\n  // count라는 상태 변수를 0으로 초기화\n  const [count, setCount] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uD604\\uC7AC \\uC22B\\uC790: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: \"\\uC22B\\uC790 \\uC99D\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n_s(Counter, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Counter","_s","count","setCount","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/bbk03/Desktop/Boottent/my-app/src/Todo.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\n\r\n// export default function Todo() {\r\n//     // 초기 할 일 목록 상태 : 배열로 저장 (id, text)\r\n//     const [todos, setTodos] = useState([\r\n//         { id: 1, text: '청소하기' },\r\n//         { id: 2, text: '공부하기' },\r\n//         { id: 3, text: '청소1하기' },\r\n//         { id: 4, text: '공부1하기' },\r\n//         { id: 5, text: '청소2하기' },\r\n//         { id: 6, text: '공부2하기' },\r\n//     ]);\r\n\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>할 일 목록</h2>\r\n//             <ul>\r\n//                 {todos.map(todo => (\r\n//                     <li key={todo.id}>{todo.text}</li>  // map을 써서 배열 요소마다 li 반복문 만들 수 있다.\r\n//                 ))}\r\n//                 {/* 리스트에서 항상 key prop에 고유한 값을 주어야 효율적인 업데이트 가능.. */}\r\n//             </ul>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n// jQuery에서 input에 쓴 값을 읽고 append로 <li> 추가했던 것처럼,\r\n// React에서는 input값도 useState로 관리하고, 버튼 클릭 시 todos 배열을 업데이트하는 함수로 처리한다. \r\n\r\n// export default function Todo() {\r\n//     const [todos, setTodos] = useState([\r\n//         { id: 1, text: '청소하기' },\r\n\r\n//     ]);\r\n\r\n//     // input 값 상태\r\n//     const [inputValue, setInputValue] = useState('');\r\n\r\n//     // 추가 함수\r\n//     const addTodo = () => {\r\n//         const trimmed = inputValue.trim();\r\n//         if (trimmed === '') {\r\n//             alert('값을 추가해주세요.');\r\n//             return;\r\n//         }\r\n\r\n//         // 이전 배열에 새 할 일 추가\r\n//         setTodos([...todos, { id: Date.now(), text: trimmed }]);\r\n//         setInputValue(''); // 입력창 초기화\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>할 일 목록</h2>\r\n//             <ul>\r\n//                 {todos.map(todo => (\r\n//                     <li key={todo.id}>{todo.text}</li>\r\n//                 ))}\r\n//             </ul>\r\n\r\n//             <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"할 일을 입력하세요\"\r\n//                 value={inputValue}\r\n//                 onChange={e => setInputValue(e.target.value)} // 입력 변화 감지\r\n//             />\r\n//             <button onClick={addTodo}>할일목록추가</button>\r\n//         </div>\r\n//     );\r\n// } \r\n\r\n\r\n\r\nexport default function Counter() {\r\n    // count라는 상태 변수를 0으로 초기화\r\n    const [count, setCount] = useState(0);\r\n\r\n    return (\r\n        <div>\r\n            <p>현재 숫자: {count}</p>\r\n            <button onClick={() => setCount(count + 1)}>    \r\n                {/*  */}\r\n                숫자 증가\r\n            </button>\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAIvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIA,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAC9B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAErC,oBACIE,OAAA;IAAAK,QAAA,gBACIL,OAAA;MAAAK,QAAA,GAAG,6BAAO,EAACF,KAAK;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBT,OAAA;MAAQU,OAAO,EAAEA,CAAA,KAAMN,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAE;MAAAE,QAAA,EAC/B;IAEZ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAACP,EAAA,CAbuBD,OAAO;AAAAU,EAAA,GAAPV,OAAO;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}