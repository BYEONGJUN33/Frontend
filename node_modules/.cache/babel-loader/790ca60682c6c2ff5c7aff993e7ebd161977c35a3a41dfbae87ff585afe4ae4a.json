{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bbk03\\\\Desktop\\\\Boottent\\\\my-app\\\\src\\\\CardItem.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardItem(props) {\n  // props에서 값 꺼내쓰기 (구조분해는 우선 생략, 필요한 것 props.~~~)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: props.imageUrl,\n      alt: props.title,\n      className: \"card-img\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"card-price\",\n        children: [props.price, \"\\uC6D0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"card-title\",\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 68\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n_c = CardItem;\nexport default CardItem;\n\n//App.js에있는 카드 정보 6가지를 여기 위에 컴포넌트를 사용해 별개의 파일로 분리해 작성할 수 있었고,\n//React가 아니면 카드 6개 쓸때마다 Html태그를 일일히 써야 했을 것. \n//JS로는 DOM 조작을 직접, 반복문 없이 한다면 비효율적으로 만들어질 것을 대비함. \n//즉, React는 컴포넌트를 '클래스' 또는 '함수' 형태로 만들기 때문에, 카드 하나 UI를 컴포넌트로 정의 =>여러 데이터로 사용 가능\n\n//props는 컴포넌트가 부모로부터 전달받는 데이터. \n//CardItem 컴포넌트에서 props.OOO은 부모 App.js에서 \nvar _c;\n$RefreshReg$(_c, \"CardItem\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CardItem","props","className","children","src","imageUrl","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","price","_c","$RefreshReg$"],"sources":["C:/Users/bbk03/Desktop/Boottent/my-app/src/CardItem.js"],"sourcesContent":["import React from \"react\";\r\n\r\nfunction CardItem(props) {\r\n    // props에서 값 꺼내쓰기 (구조분해는 우선 생략, 필요한 것 props.~~~)\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={props.imageUrl} alt={props.title} className=\"card-img\" />\r\n            {/* <div className=\"card-price\">{props.price}원</div>\r\n            <h3 className=\"card-title\">{props.title}</h3> */}\r\n            <div>\r\n                <span className=\"card-price\">{props.price}원</span> <span className=\"card-title\">{props.title}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardItem;\r\n\r\n\r\n\r\n\r\n\r\n\r\n//App.js에있는 카드 정보 6가지를 여기 위에 컴포넌트를 사용해 별개의 파일로 분리해 작성할 수 있었고,\r\n//React가 아니면 카드 6개 쓸때마다 Html태그를 일일히 써야 했을 것. \r\n//JS로는 DOM 조작을 직접, 반복문 없이 한다면 비효율적으로 만들어질 것을 대비함. \r\n//즉, React는 컴포넌트를 '클래스' 또는 '함수' 형태로 만들기 때문에, 카드 하나 UI를 컴포넌트로 정의 =>여러 데이터로 사용 가능\r\n\r\n//props는 컴포넌트가 부모로부터 전달받는 데이터. \r\n//CardItem 컴포넌트에서 props.OOO은 부모 App.js에서 "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,QAAQA,CAACC,KAAK,EAAE;EACrB;EACA,oBACIF,OAAA;IAAKG,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACjBJ,OAAA;MAAKK,GAAG,EAAEH,KAAK,CAACI,QAAS;MAACC,GAAG,EAAEL,KAAK,CAACM,KAAM;MAACL,SAAS,EAAC;IAAU;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGnEZ,OAAA;MAAAI,QAAA,gBACIJ,OAAA;QAAMG,SAAS,EAAC,YAAY;QAAAC,QAAA,GAAEF,KAAK,CAACW,KAAK,EAAC,QAAC;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC,eAAAZ,OAAA;QAAMG,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAEF,KAAK,CAACM;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACE,EAAA,GAZQb,QAAQ;AAcjB,eAAeA,QAAQ;;AAOvB;AACA;AACA;AACA;;AAEA;AACA;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}