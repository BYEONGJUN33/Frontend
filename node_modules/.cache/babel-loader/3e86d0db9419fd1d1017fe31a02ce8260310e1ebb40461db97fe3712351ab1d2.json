{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bbk03\\\\Desktop\\\\Boottent\\\\my-app\\\\src\\\\ClassComponent.js\";\n// import React, { Component } from \"react\";\n\n// class ClassComponent extends Component {\n//     //최기화\n//     constructor(props) {\n//         super(props);\n//         this.state = { count: 0 }\n//         console.log(\"constuctor 실행\");\n//     }\n\n//     componentDidMount() {\n//         console.log(\"componentDidMount (처음 렌더링 완료)\")\n//     };\n//     componentDidUpdate() {\n//         console.log(\"componentDidMount (처음 렌더링 완료)\")\n//     };\n//     componentDidWillUnmount() {\n//         console.log(\"componentDidMount (컴포넌트 제거됨 )\")\n//     };\n\n//     render() {\n//         return (\n//             <>\n//                 <h2>클래스형 컴포넌트</h2>\n//                 <p>카운트 </p>\n//                 <button onClick={() => { this.setState.count + 1 }}>+1 버튼</button>\n//             </>\n//         )\n//     };\n// };\n\n// export default ClassComponent;\n\nimport React, { Component } from \"react\";\n\n//constructor    컴포넌트 인스턴스 생성 시 1회 - 초기 state 설정 및 메서드 바인딩 가능\n//render    리렌더링 때마다 실행 - UI JSX를 만들어서 화면에 보여준다 \n//componentDidMount    렌더링 끝난 직후 1회 - 네트워크 요청 및 타이머 설정 등 초기작업에 사용한다\n//shouldComponentUpdate    state나 props 변경 시 매번 호출된다 - 리렌더링 허용 여부 결정 (true/false반환)\n//componentDidUpdate    리렌더링 완료 직후 호출 - 상태 변경 후 후속 작업에 사용\n//componentWillUnmount    컴포넌트가 화면에서 사라지기 직전 호출 - 타이머 정리, 구독 해제 등 청소 작업에 사용 \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ClassComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    //컴포넌트가 생성될 때 호출된다 constructor ()\n    this.handelIncrement = () => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n    this.state = {\n      count: 0,\n      hasError: false\n    };\n    console.log(\"constructor\");\n  }\n\n  // count 는 0으로 기본 세팅 값일테고 hasError은 몰라\n\n  //componrntDidMount()는 컴포넌트가 처음으로 DOM 마운트(연결)된 직후에 호출됨 \n  componentDidMount() {\n    console.log(\"componentDidMount (처음 렌더링 완료)\");\n    // 예: 네트워크 요청이나 타이머 설정 등의 작업??? 컴포넌트가 처음 나타난 직후 1번만 호출된다.\n  }\n  // shouldComponentUpdata(): 컴포넌트가 리렌더링 되어야 할지 결정한다\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"shouldComponentUpdate\");\n    // 예: 상태가 변경될 때만 리렌더링\n    return nextState.count !== this.state.count;\n  }\n  // componentDidUpdate() : 컴포넌트가 리렌더링된 직후에 호출된다 \n  componentDidUpdate(preProps, prevState, snapshot) {\n    if (prevState.count !== this.state.count) {\n      console.log(\"count 값이 변경되어 componentDidUpdate 실행\");\n      //예: 상태변경 후 추가 작업??\n    }\n  }\n  //componentWillUnmount() : 컴포넌트가 DOM에서 제거되기 직전에 호출됩니다. \n  componentWillUnmount() {\n    console.log(\"componentWillUnmount\");\n    //예: 타이머 해제나 네트워크 요청 취소등의 작업\n  }\n  render() {\n    //render() : 컴포넌트 UI정의              렌더 숫자 같이\n    console.log(\"render - currnt count\", this.state.count);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"React LifeCycle Methods Demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Count: \", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handelIncrement,\n        children: \"\\uC99D\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  }\n}\n;\nexport default ClassComponent;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","ClassComponent","constructor","props","handelIncrement","setState","count","state","hasError","console","log","componentDidMount","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","preProps","prevState","snapshot","componentWillUnmount","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["C:/Users/bbk03/Desktop/Boottent/my-app/src/ClassComponent.js"],"sourcesContent":["// import React, { Component } from \"react\";\r\n\r\n\r\n// class ClassComponent extends Component {\r\n//     //최기화\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = { count: 0 }\r\n//         console.log(\"constuctor 실행\");\r\n//     }\r\n\r\n\r\n//     componentDidMount() {\r\n//         console.log(\"componentDidMount (처음 렌더링 완료)\")\r\n//     };\r\n//     componentDidUpdate() {\r\n//         console.log(\"componentDidMount (처음 렌더링 완료)\")\r\n//     };\r\n//     componentDidWillUnmount() {\r\n//         console.log(\"componentDidMount (컴포넌트 제거됨 )\")\r\n//     };\r\n\r\n\r\n//     render() {\r\n//         return (\r\n//             <>\r\n//                 <h2>클래스형 컴포넌트</h2>\r\n//                 <p>카운트 </p>\r\n//                 <button onClick={() => { this.setState.count + 1 }}>+1 버튼</button>\r\n//             </>\r\n//         )\r\n//     };\r\n// };\r\n\r\n// export default ClassComponent;\r\n\r\n\r\n\r\nimport React, { Component } from \"react\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n//constructor    컴포넌트 인스턴스 생성 시 1회 - 초기 state 설정 및 메서드 바인딩 가능\r\n//render    리렌더링 때마다 실행 - UI JSX를 만들어서 화면에 보여준다 \r\n//componentDidMount    렌더링 끝난 직후 1회 - 네트워크 요청 및 타이머 설정 등 초기작업에 사용한다\r\n//shouldComponentUpdate    state나 props 변경 시 매번 호출된다 - 리렌더링 허용 여부 결정 (true/false반환)\r\n//componentDidUpdate    리렌더링 완료 직후 호출 - 상태 변경 후 후속 작업에 사용\r\n//componentWillUnmount    컴포넌트가 화면에서 사라지기 직전 호출 - 타이머 정리, 구독 해제 등 청소 작업에 사용 \r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ClassComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //컴포넌트가 생성될 때 호출된다 constructor ()\r\n        this.state = {\r\n            count: 0,\r\n            hasError: false,\r\n\r\n        };            console.log(\"constructor\");\r\n    }\r\n\r\n\r\n    // count 는 0으로 기본 세팅 값일테고 hasError은 몰라\r\n\r\n    //componrntDidMount()는 컴포넌트가 처음으로 DOM 마운트(연결)된 직후에 호출됨 \r\n    componentDidMount() {\r\n        console.log(\"componentDidMount (처음 렌더링 완료)\");\r\n        // 예: 네트워크 요청이나 타이머 설정 등의 작업??? 컴포넌트가 처음 나타난 직후 1번만 호출된다.\r\n    };\r\n\r\n    // shouldComponentUpdata(): 컴포넌트가 리렌더링 되어야 할지 결정한다\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(\"shouldComponentUpdate\");\r\n        // 예: 상태가 변경될 때만 리렌더링\r\n        return nextState.count !== this.state.count;\r\n    };\r\n\r\n\r\n    // componentDidUpdate() : 컴포넌트가 리렌더링된 직후에 호출된다 \r\n    componentDidUpdate(preProps, prevState, snapshot) {\r\n        if (prevState.count !== this.state.count) {\r\n            console.log(\"count 값이 변경되어 componentDidUpdate 실행\");\r\n            //예: 상태변경 후 추가 작업??\r\n        }\r\n\r\n    };\r\n\r\n    //componentWillUnmount() : 컴포넌트가 DOM에서 제거되기 직전에 호출됩니다. \r\n    componentWillUnmount() {\r\n        console.log(\"componentWillUnmount\");\r\n        //예: 타이머 해제나 네트워크 요청 취소등의 작업\r\n    };\r\n\r\n    handelIncrement = () => {\r\n        this.setState({ count: this.state.count + 1 });\r\n    }\r\n\r\n    render() {\r\n        //render() : 컴포넌트 UI정의              렌더 숫자 같이\r\n        console.log(\"render - currnt count\", this.state.count);\r\n\r\n        return (\r\n            <div>\r\n                <h1>React LifeCycle Methods Demo</h1>\r\n                <p>Count: {this.state.count}</p>\r\n                <button onClick={this.handelIncrement}>증가</button>\r\n                {/* <button onClick={() => console.log(\"컴포넌트 제거 이벤트\")} >componentWillUnmount</button> */}\r\n            </div>\r\n        )\r\n\r\n    }\r\n};\r\n\r\nexport default ClassComponent;\r\n\r\n\r\n"],"mappings":";AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;;AAOxC;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,cAAc,SAASJ,KAAK,CAACC,SAAS,CAAC;EACzCI,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ;IAAA,KAwCJC,eAAe,GAAG,MAAM;MACpB,IAAI,CAACC,QAAQ,CAAC;QAAEC,KAAK,EAAE,IAAI,CAACC,KAAK,CAACD,KAAK,GAAG;MAAE,CAAC,CAAC;IAClD,CAAC;IAzCG,IAAI,CAACC,KAAK,GAAG;MACTD,KAAK,EAAE,CAAC;MACRE,QAAQ,EAAE;IAEd,CAAC;IAAaC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC5C;;EAGA;;EAEA;EACAC,iBAAiBA,CAAA,EAAG;IAChBF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C;EACJ;EAEA;EACAE,qBAAqBA,CAACC,SAAS,EAAEC,SAAS,EAAE;IACxCL,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC;IACA,OAAOI,SAAS,CAACR,KAAK,KAAK,IAAI,CAACC,KAAK,CAACD,KAAK;EAC/C;EAGA;EACAS,kBAAkBA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAE;IAC9C,IAAID,SAAS,CAACX,KAAK,KAAK,IAAI,CAACC,KAAK,CAACD,KAAK,EAAE;MACtCG,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClD;IACJ;EAEJ;EAEA;EACAS,oBAAoBA,CAAA,EAAG;IACnBV,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC;EACJ;EAMAU,MAAMA,CAAA,EAAG;IACL;IACAX,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACH,KAAK,CAACD,KAAK,CAAC;IAEtD,oBACIN,OAAA;MAAAqB,QAAA,gBACIrB,OAAA;QAAAqB,QAAA,EAAI;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrCzB,OAAA;QAAAqB,QAAA,GAAG,SAAO,EAAC,IAAI,CAACd,KAAK,CAACD,KAAK;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChCzB,OAAA;QAAQ0B,OAAO,EAAE,IAAI,CAACtB,eAAgB;QAAAiB,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEjD,CAAC;EAGd;AACJ;AAAC;AAED,eAAexB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}